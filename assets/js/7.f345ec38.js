(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{325:function(t,n,a){"use strict";a.r(n);var s=a(33),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"立即执行函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#立即执行函数"}},[t._v("#")]),t._v(" 立即执行函数")]),t._v(" "),a("h2",{attrs:{id:"_0-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-定义"}},[t._v("#")]),t._v(" 0. 定义")]),t._v(" "),a("p",[t._v("此类函数没有声明，在一次执行后即释放，适合做初始化工作")]),t._v(" "),a("h3",{attrs:{id:"_1-为什么要用立即执行函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么要用立即执行函数"}},[t._v("#")]),t._v(" 1. 为什么要用立即执行函数")]),t._v(" "),a("p",[t._v("针对初始化功能的函数，一些我们只需执行一次，比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function (){\n    ...此处省略一 W 行代码\n}\n")])])]),a("p",[t._v("这个时候我们用立即执行函数，好处是执行完以后立即被清空，这个也是 JS 给我们提供的唯一一个会被清空的函数。立即执行形式如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("( function () {\n\n} ())\n")])])]),a("p",[t._v("这个函数除了执行后会被清空，其它和别的函数没有任何区别。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var result = ( function (形式参数) {\nreturn ...\n} (实际参数) )\n")])])]),a("p",[t._v("＊ 注意，这里的函数是匿名函数，但是即使在这里你给它一个名字，也是无法再找到它的，会报错哦，我们可以外部接收。")]),t._v(" "),a("h3",{attrs:{id:"_2-立即执行函数的两种形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-立即执行函数的两种形式"}},[t._v("#")]),t._v(" 2. 立即执行函数的两种形式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 第一种 (w3c 建议)\n( function () {\n\n} ())\n\n//第二种\n( function () {\n\n} ) ()\n\n//（＊ 只有表达式才能被执行符号执行 ）\n// 函数声明\nfunction test () {\n    var  a  = 123\n} ()  //    执行结果是 ->   报错    \n\n//  第三种\n//  能被执行符号执行的表达式函数名会被自动忽略\nvar test = function (){\n    console.log('loged')\n} () //  执行结果是 -> loged\ntest // 执行结果是 -> undefined\n\n// 第四种\n//  ! (+ or  - or $$   or  || ) 都行，但是后两个前面要加东西；\n! function test (){\n    console.log('a')\n}()\n\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);